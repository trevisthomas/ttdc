package org.ttdc.persistence.test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;
import org.ttdc.persistence.Persistence;
import org.ttdc.persistence.objects.Image;
import org.ttdc.persistence.objects.ImageFull;
import org.ttdc.persistence.objects.Person;
import org.ttdc.persistence.objects.Style;
import org.ttdc.persistence.objects.UserObject;

import junit.framework.TestCase;


public class PersonTester extends TestCase {
	private static Logger log = Logger.getLogger(PersonTester.class);
	
	
	//Trevis test update! (remeber it saveOrUpdate didnt work right with annotations for some reason)
	
	public List<Person> load(){
		Session session = Persistence.beginSession();
		
		Query query = session.getNamedQuery("person.getAll");
		ArrayList<Person> list = (ArrayList<Person>)query.list();
		for(int i=0; i<list.size();i++){
			log.info(list.get(i));
		}
		Persistence.commit();
		
		return list;
	}
	
	public Person loadPerson(String guid){
		Session session = Persistence.beginSession();
		Query query = session.getNamedQuery("person.getByGuid").setString("guid", guid);
		Person p = (Person)query.uniqueResult();
		//Hibernate.initialize(p.getPrivileges());
		Persistence.commit();
		return p;
	}
	
	public List<Image> loadImages(){
		Query query = Persistence.beginSession().createQuery("From Image");
		ArrayList<Image> list = (ArrayList<Image>)query.list();
		for(int i=0; i<list.size();i++){
			log.info(list.get(i));
		}
		Persistence.commit();
		return list;
	}
	public List<Style> loadStyles(){
		Query query = Persistence.beginSession().createQuery("From Style");
		ArrayList<Style> list = (ArrayList<Style>)query.list();
		Persistence.commit();
		return list;
	}
	public Style loadStyle(UUID uuid){
		Query query = Persistence.beginSession().getNamedQuery("style.getById").setString("styleId",uuid.toString());
		Style style = (Style)query.list();
		Persistence.commit();
		return style;
	}
	
	public List<UserObject> loadUserObjects(){
		Query query = Persistence.beginSession().createQuery("From UserObject");
		ArrayList<UserObject> list = (ArrayList<UserObject>)query.list();
		Persistence.commit();
		return list;
	}
	
	public static Person makePerson(){
		Person p = new Person();
		p.setEmail("trevisthomas@gmail.com");
		p.setLastAccessDate(new Date());
		p.setLogin("trevis2");
		p.setPassword("password");
		p.setStatus(Person.STATUS_ACTIVE);
		p.setName("Trevis Autogenerated Test Account Thomas");
		return p;
	}
	
	public static ImageFull makeImage(Person person){
		ImageFull i = new ImageFull();
		
		File file = new File("c:/admin.jpg");
		try {
			FileInputStream is = new FileInputStream(file);
			Blob blob = Hibernate.createBlob(is);
			i.setImage(blob);
		
		} catch (FileNotFoundException e) {
			log.error(e);
			return null;
		} catch (IOException e) {
			log.error(e);
			return null;
		}
			
		i.setName(file.getName());
		i.setWidth(20);
		i.setHeight(40);
		i.setOwner(person);
		
		
		return i;
		
	}
	
	public static Style makeStyle(Person person){
		Style s = new Style();
		s.setCreator(person);
		s.setCss("test.css");
		s.setDescription("My Test CSS");
		s.setName("Test");
		return s;
	}
	
	public static UserObject makeUserObject(Person person, Image image){
		UserObject uo = new UserObject();
		uo.setType(UserObject.TYPE_WEBPAGE);
		uo.setThumbnail(image);
		uo.setOwner(person);
		return uo;
	}
	
	public static UserObject makeUserObject(Person person){
		UserObject uo = new UserObject();
		uo.setType(UserObject.TYPE_WEBPAGE);
		uo.setUrl("http://www.trevisthomas.com");
		uo.setOwner(person);
		return uo;
	}
	
	
	public final void testCreateTag(){
		try{
			//Persistence.save(makePerson());
			
			/*
			List<Person> list = load();
			assertTrue(list.size() > 0);
			Image i = makeImage(list.get(2));
			Persistence.save(i);
			*/
			
			//Person p = loadPerson("D379886C-8A0F-4BC4-AC24-99E495CCFEF0");
			//Person p = loadPerson("8c06a4d5-1824-4631-b093-fe012aec8b45");
			//Person p = loadPerson("8024998b-6c30-434e-8e06-3f74bc13bb78");		
			//Person p = loadPerson("8C06A4D5-1824-4631-B093-FE012AEC8B45");
			//log.info(p);
			
			//Style s = loadStyle( UUID.fromString("4967fd8f-c1fe-43c6-99c0-6cb88fa5a2e0"));
			//log.info(s);
			/*
			Image i = makeImage(p);
			p.setImage(i);
			Persistence.save(i);
			Persistence.update(p);
			*/
			
			/*
			Person p = load().get(0);
			Persistence.save(makeStyle(p));
			*/
			
			/*
			Person p = load().get(0);
			Persistence.save(makeUserObject(p, loadImages().get(0)));
			*/
			
			/*
			Person p = load().get(0);
			p.setStyle(loadStyles().get(0));
			Persistence.update(p);
			*/
			
			//Person p = load().get(0);
			//Person p = loadPerson("fb9bcac7-92c8-448f-997e-75c4ec1d3254");
			
			/*
			Person p = loadPerson("D379886C-8A0F-4BC4-AC24-99E495CCFEF0");
			Persistence.save(makeUserObject(p));
			*/
			/*
			Person p = loadPerson("D379886C-8A0F-4BC4-AC24-99E495CCFEF0");
			log.info(p.getPrivileges());
			*/
			//Persistence.save();
			/*
			//Set style;
			Style style = makeStyle(p);
			Persistence.save(style);
			p.setStyle(style);
			Persistence.update(p);
			*/
			//log.info(p);
			//log.info(p.getStyle().getCss());

			/*
			UserObject uo = makeUserObject(p); //TREVIS notice that you didnt even have to save it first. Cascade took care of it.
			p.addObject(uo);
			Persistence.update(p);
			*/
			
			
			
			
			
		}	
		catch(Throwable t){
			log.error(t);
			fail(t.getMessage());
		}
	}
	
	public void testPersonUserObjectCascade() throws Exception {
		String newPersonId;
		Person loadedP = null;
		try{
		
		
		Session session = Persistence.beginSession();
		Person p = makePerson();
		session.save(p);
		
		newPersonId = p.getPersonId();
		log.info("New personId: "+newPersonId);
		
		UserObject uo = makeUserObject(p);
		session.save(uo);
		
		log.info("Looser Objects:"+p.getObjects());
		Persistence.commit();
		
		session = Persistence.beginSession();
		
		
		loadedP = (Person)session.load(Person.class, newPersonId);
		log.info("Loaded P's looser objects:"+loadedP.getObjects());
		session.delete(loadedP.getObjects().get(0));
		log.info("Loaded P's looser objects after delete:"+loadedP.getObjects());
		//session.evict(loadedP);
		Persistence.commit();
		
		session = Persistence.beginSession();
		loadedP = (Person)session.load(Person.class, newPersonId);
		log.info("Loaded P's looser objects after delte then commit:"+loadedP.getObjects());
		}
		catch(Exception e){
			log.info(e);
		}
		finally{
			Session session = Persistence.beginSession();
			if(loadedP != null)
				session.delete(loadedP);
			Persistence.commit();
		}
		
	}

}
